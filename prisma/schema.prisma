// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#String
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

enum Role {
    student
    employer
    admin
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    dob           DateTime?
    role          Role?
    university    String?
    faculty       String?
    cv            String?
    description   String?
    image         String?
    company_id    String?
    accounts      Account[]
    sessions      Session[]
    experiences   Experience[]
    internships   Internship[]
}

model Experience {
    id          String    @id @default(cuid())
    company     String
    position    String
    startDate   DateTime?
    endDate     DateTime?
    description String
    user        User      @relation(fields: [userId], references: [id])

    userId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Internship {
    id            String   @id @default(cuid())
    companyId     String
    position      String
    location      String
    workingPlace  String
    fullTime      Boolean
    description   String
    paid          Boolean
    payRangeStart Int?
    payRangeEnd   Int?
    openPositions Int
    deadline      DateTime
    applicants    User[]
    hireRate      Float?
    Company       Company  @relation(fields: [companyId], references: [id])
}

model Company {
    id           String       @id @default(cuid())
    name         String       @unique
    internships  Internship[]
    description  String
    country      String
    headquarters String
    employees    Int
    domain       String

    reviews Review[]
}

model Review {
    id          String   @id @default(cuid())
    companyId   String
    title       String
    position    String
    description String
    stars       Int
    startDate   DateTime
    endDate     DateTime
    createdAt   DateTime
    Company     Company  @relation(fields: [companyId], references: [id])
}
